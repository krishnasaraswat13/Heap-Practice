class Solution {
    public String frequencySort(String s) {
         Map<Character, Integer> freqMap = new HashMap<>();
        for (char word :s.toCharArray()) {
            freqMap.put(word, freqMap.getOrDefault(word, 0) + 1);
        }

        // Step 2: Min-heap with custom comparator
        PriorityQueue<Character> pq = new PriorityQueue<>((a,b)->freqMap.get(a)-freqMap.get(b)==0?b.compareTo(a):freqMap.get(a)-freqMap.get(b));
       

        // Step 3: Keep top k elements in heap
        for (char word : freqMap.keySet()) {
            pq.offer(word);
        
        }

      StringBuilder result = new StringBuilder();
        while (!pq.isEmpty()) {
            char ch = pq.poll();
            int freq = freqMap.get(ch);
            for (int i = 0; i < freq; i++) {
                result.append(ch);
            }
        }
        result.reverse();
        return result.toString();
    }
}